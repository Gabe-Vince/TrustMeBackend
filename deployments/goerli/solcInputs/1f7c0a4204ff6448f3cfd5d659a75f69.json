{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721Receiver.sol\";\n\n/**\n * @dev Implementation of the {IERC721Receiver} interface.\n *\n * Accepts all token transfers.\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\n */\ncontract ERC721Holder is IERC721Receiver {\n    /**\n     * @dev See {IERC721Receiver-onERC721Received}.\n     *\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/library/SecurityFunctions.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.17;\nimport \"../library/Validation.sol\";\nimport \"../library/TradeLib.sol\";\n\n/**  @title SecurityFunctions\n * @notice This contract contains all the security functions used in the TrustMe contract\n * @dev This contract is used to store the security functions used in the TrustMe contract\n */\n\nlibrary SecurityFunctions {\n\t/**  @notice This validtaes the inputs of the addTrade function\n\t * @param trade The trade struct\n\t * @param value The amount of ETH sent with the transaction\n\t */\n\tfunction validateAddTrade(TradeLib.Trade memory trade, uint value) internal {\n\t\tValidation.checkEmptyAddress(msg.sender);\n\t\tValidation.checkEmptyAddress(trade.buyer);\n\t\tValidation.checkSameAddress(msg.sender, trade.buyer);\n\t\tValidation.checkSameToken(trade.token.tokenToSell, trade.token.tokenToBuy);\n\t\tValidation.checkTokenInput(trade.token.tokenToSell, trade.token.amountOfTokenToSell);\n\t\tValidation.checkTokenInput(trade.token.tokenToBuy, trade.token.amountOfTokenToBuy);\n\t\tValidation.checkNftOwner(trade.nft.addressNFTToSell, msg.sender, trade.nft.tokenIdNFTToSell);\n\t\tValidation.checkETHToETHTrade(trade.eth.amountOfETHToSell, trade.eth.amountOfETHToBuy);\n\t\tValidation.checkNftInputs(trade.nft.addressNFTToSell, trade.nft.addressNFTToBuy);\n\t\tValidation.checkSameAddress(trade.token.tokenToSell, trade.nft.addressNFTToSell);\n\t\tValidation.checkSameAddress(trade.token.tokenToSell, trade.nft.addressNFTToBuy);\n\t\tValidation.checkSameAddress(trade.token.tokenToBuy, trade.nft.addressNFTToSell);\n\t\tValidation.checkSameAddress(trade.token.tokenToBuy, trade.nft.addressNFTToBuy);\n\t\tValidation.checkEmptyInputs(\n\t\t\ttrade.token.amountOfTokenToSell,\n\t\t\ttrade.eth.amountOfETHToSell,\n\t\t\ttrade.nft.addressNFTToSell\n\t\t);\n\t\tValidation.checkEmptyInputs(\n\t\t\ttrade.token.amountOfTokenToBuy,\n\t\t\ttrade.eth.amountOfETHToBuy,\n\t\t\ttrade.nft.addressNFTToBuy\n\t\t);\n\n\t\tif (value != trade.eth.amountOfETHToSell) revert IncorrectAmoutOfETHTransferred();\n\t}\n\n\t/**  @notice This validtaes the inputs of the confirmTrade function\n\t * @param trade The trade struct\n\t * @param sender The address of the sender\n\t * @param value The amount of ETH sent with the transaction\n\t */\n\tfunction validateConfirmTrade(TradeLib.Trade memory trade, address sender, uint value) internal {\n\t\tValidation.checkBuyer(trade.buyer, sender);\n\t\tValidation.checkDeadline(trade.deadline);\n\t\tValidation.checkNftOwner(trade.nft.addressNFTToBuy, trade.buyer, trade.nft.tokenIdNFTToBuy);\n\t\tValidation.checkNftOwner(trade.nft.addressNFTToSell, address(this), trade.nft.tokenIdNFTToSell);\n\t\tValidation.checkEthAmount(value, trade.eth.amountOfETHToBuy);\n\t}\n\n\t/** @notice This validtaes the inputs of the cancelTrade function\n\t * @param trade The trade struct\n\t * @param sender The address of the sender\n\t */\n\tfunction validateCancelTrade(TradeLib.Trade memory trade, address sender) internal {\n\t\tif (trade.status != TradeLib.TradeStatus.Pending) revert TradeIsNotPending();\n\t\tValidation.checkSellerOrBuyer(trade.seller, trade.buyer, sender);\n\n\t\tValidation.checkDeadline(trade.deadline);\n\t}\n\n\t/** @notice This validtaes the inputs of the withdraw function\n\t * @param trade The trade struct\n\t * @param sender The address of the sender\n\t */\n\tfunction validateWithdraw(TradeLib.Trade memory trade, address sender) internal {\n\t\tif (trade.status != TradeLib.TradeStatus.Expired) revert TradeIsNotExpired();\n\t\tValidation.checkTradeNotExpired(trade.deadline);\n\t\tValidation.checkSeller(trade.seller, sender);\n\t}\n}\n"
    },
    "contracts/library/TradeLib.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.17;\n\n/** @title TradeLib\n * \t@notice This contract contains all the structs used in the TrustMe contract\n *\t@dev This contract is used to store the structs used in the TrustMe contract\n */\n\nlibrary TradeLib {\n\tstruct NFT {\n\t\taddress addressNFTToSell;\n\t\tuint256 tokenIdNFTToSell;\n\t\taddress addressNFTToBuy;\n\t\tuint256 tokenIdNFTToBuy;\n\t}\n\n\tstruct Token {\n\t\taddress tokenToSell;\n\t\tuint256 amountOfTokenToSell;\n\t\taddress tokenToBuy;\n\t\tuint256 amountOfTokenToBuy;\n\t}\n\n\tstruct Eth {\n\t\tuint256 amountOfETHToSell;\n\t\tuint256 amountOfETHToBuy;\n\t}\n\n\tenum TradeStatus {\n\t\tPending,\n\t\tConfirmed,\n\t\tCanceled,\n\t\tExpired,\n\t\tWithdrawn\n\t}\n\n\tstruct Trade {\n\t\tuint256 tradeId;\n\t\taddress seller;\n\t\taddress buyer;\n\t\tNFT nft;\n\t\tToken token;\n\t\tEth eth;\n\t\tuint256 deadline;\n\t\tuint256 dateCreated;\n\t\tTradeStatus status;\n\t}\n}\n"
    },
    "contracts/library/Validation.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.17;\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\nerror InvalidAddress();\nerror CannotTradeSameToken();\nerror TokenAndNFTAddressCannotBeEqual();\nerror CannotTradeWithSelf();\nerror DeadlineShouldBeAtLeast5Minutes();\nerror InvalidAmount();\nerror InsufficientBalance();\nerror OnlyBuyer();\nerror OnlySeller();\nerror OnlySellerOrBuyer();\nerror TradeIsNotPending();\nerror TradeIsExpired();\nerror InsufficientAllowance();\nerror UpkeepNotNeeded();\nerror CannotWithdrawTimeNotPassed();\nerror TradeIsNotExpired();\nerror IncorrectAmoutOfETHTransferred();\nerror InvalidTokenInput();\nerror InvalidNFTInput();\nerror InvalidInputs();\nerror NotNftOwner();\nerror NftNotApproved();\n\n/** @title Validation\n * @notice This contract contains all the validation functions used in the TrustMe contract\n * @dev This contract is used to store the validation functions used in the TrustMe contract\n */\n\nlibrary Validation {\n\t//\t if address is empty, revert\n\tfunction checkEmptyAddress(address _address) internal pure returns (bool) {\n\t\tif (_address == address(0)) revert InvalidAddress();\n\t\treturn true;\n\t}\n\n\t//\t if amount is empty, revert\n\tfunction checkEmptyAmount(uint256 _uint) internal pure returns (bool) {\n\t\tif (_uint == 0) revert InvalidAmount();\n\t\treturn true;\n\t}\n\n\t// if token is the same, revert\n\tfunction checkSameToken(address _address1, address _address2) internal pure returns (bool) {\n\t\tif (\n\t\t\t_address1 == 0x0000000000000000000000000000000000000000 &&\n\t\t\t_address2 == 0x0000000000000000000000000000000000000000\n\t\t) {\n\t\t\treturn true;\n\t\t} else if (_address1 == _address2) revert CannotTradeSameToken();\n\t\treturn true;\n\t}\n\n\t// if the addresses are the same, revert\n\tfunction checkSameAddress(address _address1, address _address2) internal pure returns (bool) {\n\t\tif (\n\t\t\t_address1 == 0x0000000000000000000000000000000000000000 &&\n\t\t\t_address2 == 0x0000000000000000000000000000000000000000\n\t\t) {\n\t\t\treturn true;\n\t\t} else if (_address1 == _address2) revert CannotTradeWithSelf();\n\t\treturn true;\n\t}\n\n\t// if token address is zero and amount is greater than 0, revert\n\tfunction checkTokenInput(address _tokenAddress, uint256 _amount) internal pure returns (bool) {\n\t\tif (_tokenAddress == address(0) && _amount > 0) revert InvalidTokenInput();\n\t\treturn true;\n\t}\n\n\t//     if nft addresses is not empty and same, revert\n\tfunction checkNftInputs(\n\t\taddress _nftToSell,\n\t\taddress _nftToBuy\n\t)\n\t\tinternal\n\t\tpure\n\t\treturns (\n\t\t\t// uint _tokenIdToSell,\n\t\t\t// uint _tokenIdToBuy\n\t\t\tbool\n\t\t)\n\t{\n\t\tif (_nftToSell != address(0) && _nftToBuy != address(0) && _nftToSell == _nftToBuy) revert InvalidNFTInput();\n\n\t\treturn true;\n\t}\n\n\t// if there are empty inputs, revert\n\tfunction checkEmptyInputs(uint amtAsset1, uint amtAsset2, address asset) internal pure returns (bool) {\n\t\tif (amtAsset1 == 0 && amtAsset2 == 0 && asset == address(0)) revert InvalidInputs();\n\t\treturn true;\n\t}\n\n\t// if trade is between eth and eth, revert\n\tfunction checkETHToETHTrade(uint amtBuyerAsset, uint amtSellerAsset) internal pure returns (bool) {\n\t\tif (amtBuyerAsset > 0 && amtSellerAsset > 0) revert InvalidInputs();\n\t\treturn true;\n\t}\n\n\t// if NFT does not belong to the owner, revert\n\tfunction checkNftOwner(address _nftAddress, address owner, uint _tokenId) internal view returns (bool) {\n\t\tif (_nftAddress != address(0) && IERC721(_nftAddress).ownerOf(_tokenId) != owner) revert NotNftOwner();\n\t\treturn true;\n\t}\n\n\t// if ETH sent is not the same as the amount stated in the trade, revert\n\tfunction checkEthAmount(uint _amount1, uint amount2) internal pure returns (bool) {\n\t\tif (_amount1 < amount2) revert IncorrectAmoutOfETHTransferred();\n\t\treturn true;\n\t}\n\n\t// only buyer can call this function\n\tfunction checkBuyer(address addr1, address addr2) internal pure returns (bool) {\n\t\tif (addr1 != addr2) revert OnlyBuyer();\n\t\treturn true;\n\t}\n\n\t// only seller can call this function\n\tfunction checkSeller(address addr1, address addr2) internal pure returns (bool) {\n\t\tif (addr1 != addr2) revert OnlySeller();\n\t\treturn true;\n\t}\n\n\t// only seller or buyer can call this function\n\tfunction checkSellerOrBuyer(address addr1, address addr2, address sender) internal pure returns (bool) {\n\t\tif (addr1 != sender && addr2 != sender) revert OnlySellerOrBuyer();\n\t\treturn true;\n\t}\n\n\t// check if trade has been expired\n\tfunction checkDeadline(uint _deadline) internal view returns (bool) {\n\t\tif (_deadline < block.timestamp) revert TradeIsExpired();\n\t\treturn true;\n\t}\n\n\t// check if trade is not expired\n\tfunction checkTradeNotExpired(uint _deadline) internal returns (bool) {\n\t\tif (_deadline > block.timestamp) revert TradeIsNotExpired();\n\t\treturn true;\n\t}\n}\n"
    },
    "contracts/TrustMe.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\nimport \"./library/Validation.sol\";\nimport \"./library/SecurityFunctions.sol\";\nimport \"./library/TradeLib.sol\";\n\n/**\n * @title TrustMe - A decentralized settlement platform for ETH, ERC20 tokens and ERC721 NFTs\n * @author - @Mr-Biskit, @pokhrelanmol, @mengiefen, @Rushikesh0125 and @NicoTollenaar\n * @notice - Use this contract to create, confirm, cancel and withdraw settlements\n * @dev - All function calls are currently implemented without side effects\n * The contract uses OpenZeppelin's contracts for ERC20 and ERC721 to handle token transfers.\n * The contract also uses its own libraries for trade validation, security functions and the Trade Data Structure.\n */\n\ncontract TrustMe is ERC721Holder {\n\tusing SafeERC20 for IERC20;\n\tusing Counters for Counters.Counter;\n\tusing TradeLib for TradeLib.Trade;\n\n\t/**********************\n\t *  STATE VARIABLES *\n\t **********************/\n\n\t// Mapping to store the trades of each user.\n\tmapping(address => uint256[]) public userToTradesIDs;\n\n\t// Mapping to store each trade, identified by its trade ID.\n\tmapping(uint256 => TradeLib.Trade) public tradeIDToTrade;\n\n\t// Counter to keep track of the trade ID.\n\tCounters.Counter private _tradeId;\n\n\t// Array to store the trade IDs of all pending trades.\n\tuint256[] public pendingTradesIDs;\n\n\t// Mapping to store the ETH amount sent by the seller for each trade.\n\tmapping(uint => uint) public tradeIdToETHFromSeller;\n\n\t/**********\n\t * EVENTS *\n\t **********/\n\n\tevent TradeCreated(uint256 indexed tradeID, address indexed seller, address indexed buyer);\n\tevent TradeConfirmed(uint256 indexed tradeID, address indexed seller, address indexed buyer);\n\tevent TradeExpired(uint256 indexed tradeID, address indexed seller, address indexed buyer);\n\tevent TradeCanceled(uint256 indexed tradeID, address indexed seller, address indexed buyer);\n\tevent TradeWithdrawn(uint256 indexed tradeID, address indexed seller, address indexed buyer);\n\n\t/**\n\t * @notice - Creates a new trade\n\t * @dev - The trade is created by the seller, takes the trade data as input and transfers the tokens, NFTs or ETH to the contract.\n\t *  The trade is then added to the state variables and the trade ID is incremented.\n\t * @param transactionInput - The trade data\n\t */\n\tfunction addTrade(TradeLib.Trade memory transactionInput) external payable {\n\t\tSecurityFunctions.validateAddTrade(transactionInput, msg.value);\n\n\t\t// Modify the transactionInput to include the tradeId, deadline, status, msg.sender as seller and a date created attribute\n\t\ttransactionInput.tradeId = _tradeId.current();\n\t\ttransactionInput.seller = msg.sender;\n\t\ttransactionInput.status = TradeLib.TradeStatus.Pending;\n\t\ttransactionInput.deadline = block.timestamp + transactionInput.deadline;\n\t\ttransactionInput.dateCreated = block.timestamp;\n\n\t\t// Transfer the tokens and NFTs to the contract\n\t\tIERC20 token = IERC20(transactionInput.token.tokenToSell);\n\t\tIERC721 NFTToSell = IERC721(transactionInput.nft.addressNFTToSell);\n\t\tif (transactionInput.token.amountOfTokenToSell > 0)\n\t\t\ttoken.safeTransferFrom(msg.sender, address(this), transactionInput.token.amountOfTokenToSell);\n\t\tif (transactionInput.nft.addressNFTToSell != address(0))\n\t\t\tNFTToSell.safeTransferFrom(msg.sender, address(this), transactionInput.nft.tokenIdNFTToSell);\n\t\ttradeIdToETHFromSeller[_tradeId.current()] += msg.value;\n\n\t\t// Add the trade to the state variables\n\t\ttradeIDToTrade[_tradeId.current()] = transactionInput;\n\t\tuserToTradesIDs[msg.sender].push(_tradeId.current());\n\t\tuserToTradesIDs[transactionInput.buyer].push(_tradeId.current());\n\t\tpendingTradesIDs.push(_tradeId.current());\n\n\t\t// emit the TradeCreated event\n\t\temit TradeCreated(_tradeId.current(), msg.sender, transactionInput.buyer);\n\n\t\t// increment the tradeId\n\t\t_tradeId.increment();\n\t}\n\n\t/**\n\t * @notice - Confirms a trade\n\t * @dev - The trade is confirmed by the buyer, takes the trade ID as input and transfers the tokens, NFTs or ETH to the seller.\n\t * The tokens, NFT or ETH is transferred to the buyer from the contract.\n\t * @param _tradeID - The trade ID\n\t */\n\n\tfunction confirmTrade(uint256 _tradeID) external payable {\n\t\tTradeLib.Trade memory trade = tradeIDToTrade[_tradeID];\n\t\tif (trade.status != TradeLib.TradeStatus.Pending) revert TradeIsNotPending();\n\t\taddress sender = msg.sender;\n\t\tuint value = msg.value;\n\n\t\t// Validate the trade\n\t\tSecurityFunctions.validateConfirmTrade(trade, sender, value);\n\n\t\t// Transfer the tokens, NFTs and ETH to the buyer and seller according to the trade\n\t\tif (trade.token.amountOfTokenToBuy > 0) {\n\t\t\tIERC20(trade.token.tokenToBuy).safeTransferFrom(msg.sender, trade.seller, trade.token.amountOfTokenToBuy);\n\t\t}\n\t\tif (trade.nft.addressNFTToBuy != address(0)) {\n\t\t\tIERC721(trade.nft.addressNFTToBuy).safeTransferFrom(msg.sender, trade.seller, trade.nft.tokenIdNFTToBuy);\n\t\t}\n\t\tif (trade.eth.amountOfETHToBuy > 0) payable(trade.seller).transfer(msg.value);\n\n\t\tif (trade.token.amountOfTokenToSell > 0) {\n\t\t\tIERC20(trade.token.tokenToSell).safeTransfer(trade.buyer, trade.token.amountOfTokenToSell);\n\t\t}\n\n\t\tif (trade.nft.addressNFTToSell != address(0))\n\t\t\tIERC721(trade.nft.addressNFTToSell).safeTransferFrom(\n\t\t\t\taddress(this),\n\t\t\t\ttrade.buyer,\n\t\t\t\ttrade.nft.tokenIdNFTToSell\n\t\t\t);\n\n\t\tif (trade.eth.amountOfETHToSell > 0) payable(trade.buyer).transfer(trade.eth.amountOfETHToSell);\n\t\ttradeIdToETHFromSeller[_tradeID] -= trade.eth.amountOfETHToSell;\n\n\t\t// Update the trade status and remove it from the pending trades\n\t\ttrade.status = TradeLib.TradeStatus.Confirmed;\n\t\tremovePendingTrade(getPendingTradeIndex(trade.tradeId));\n\t\ttradeIDToTrade[_tradeID] = trade;\n\n\t\t// emit the TradeConfirmed event\n\t\temit TradeConfirmed(trade.tradeId, trade.seller, trade.buyer);\n\t}\n\n\t/**\n\t * @notice - Cancels a trade\n\t * @dev - The trade is canceled by the seller, takes the trade ID as input and transfers the tokens, NFTs or ETH back to the seller.\n\t * @param _tradeID - The trade ID\n\t */\n\tfunction cancelTrade(uint256 _tradeID) external {\n\t\tTradeLib.Trade storage trade = tradeIDToTrade[_tradeID];\n\t\taddress sender = msg.sender;\n\n\t\t// Validate the trade\n\t\tSecurityFunctions.validateCancelTrade(trade, sender);\n\n\t\t// Transfer the tokens, NFTs and ETH to the seller according to the trade\n\t\tif (trade.token.amountOfTokenToSell > 0)\n\t\t\tIERC20(trade.token.tokenToSell).safeTransfer(trade.seller, trade.token.amountOfTokenToSell);\n\n\t\tif (trade.nft.addressNFTToSell != address(0))\n\t\t\tIERC721(trade.nft.addressNFTToSell).safeTransferFrom(\n\t\t\t\taddress(this),\n\t\t\t\ttrade.seller,\n\t\t\t\ttrade.nft.tokenIdNFTToSell\n\t\t\t);\n\n\t\tif (trade.eth.amountOfETHToSell > 0) payable(trade.seller).transfer(trade.eth.amountOfETHToSell);\n\t\ttradeIdToETHFromSeller[_tradeID] -= trade.eth.amountOfETHToSell;\n\n\t\t// Update the trade status and remove it from the pending trades\n\t\ttrade.status = TradeLib.TradeStatus.Canceled;\n\t\tremovePendingTrade(getPendingTradeIndex(trade.tradeId));\n\n\t\t// emit the TradeCanceled event\n\t\temit TradeCanceled(trade.tradeId, trade.seller, trade.buyer);\n\t}\n\n\t/**\n\t * @notice - Checks if a trade is expired\n\t * @dev - Checks if a trade is expired and updates the trade status\n\t */\n\n\tfunction checkExpiredTrades() external {\n\t\t// Iterate over the pending trades and check if they are expired\n\t\tfor (uint i = pendingTradesIDs.length; i > 0; i--) {\n\t\t\tTradeLib.Trade storage trade = tradeIDToTrade[pendingTradesIDs[i - 1]];\n\t\t\tif (trade.deadline <= block.timestamp) {\n\t\t\t\ttrade.status = TradeLib.TradeStatus.Expired;\n\n\t\t\t\t// Remove the trade from the pending trades\n\t\t\t\tremovePendingTrade(i - 1);\n\n\t\t\t\t// Emit the TradeExpired event\n\t\t\t\temit TradeExpired(trade.tradeId, trade.seller, trade.buyer);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @notice - Removes the pending trades\n\t * @dev - Removes the pending trades from the pending trades array\n\t * @param index - The index of the trade to remove\n\t */\n\tfunction removePendingTrade(uint256 index) internal {\n\t\tif (index >= pendingTradesIDs.length) return;\n\t\tpendingTradesIDs[index] = pendingTradesIDs[pendingTradesIDs.length - 1];\n\t\tpendingTradesIDs.pop();\n\t}\n\n\t/**\n\t * @notice - Withdraws the asset from the contract\n\t * @dev - Withdraws the asset from the contract, takes the trade ID as input and transfers the tokens, NFTs or ETH to the seller.\n\t * @param _tradeID - The trade ID\n\t */\n\tfunction withdraw(uint256 _tradeID) external {\n\t\tTradeLib.Trade storage trade = tradeIDToTrade[_tradeID];\n\t\taddress sender = msg.sender;\n\t\tSecurityFunctions.validateWithdraw(trade, sender);\n\n\t\t// Transfer the tokens, NFTs and ETH to the seller according to the trade\n\t\tif (\n\t\t\taddress(this).balance < trade.eth.amountOfETHToSell ||\n\t\t\ttradeIdToETHFromSeller[_tradeID] < trade.eth.amountOfETHToSell\n\t\t) revert InsufficientBalance();\n\n\t\tif (trade.token.amountOfTokenToSell > 0)\n\t\t\tIERC20(trade.token.tokenToSell).safeTransfer(trade.seller, trade.token.amountOfTokenToSell);\n\n\t\tif (trade.nft.addressNFTToSell != address(0))\n\t\t\tIERC721(trade.nft.addressNFTToSell).safeTransferFrom(\n\t\t\t\taddress(this),\n\t\t\t\ttrade.seller,\n\t\t\t\ttrade.nft.tokenIdNFTToSell\n\t\t\t);\n\n\t\tif (trade.eth.amountOfETHToSell > 0) payable(trade.seller).transfer(trade.eth.amountOfETHToSell);\n\n\t\t// Update the trade status and remove it from the pending trades\n\t\ttradeIdToETHFromSeller[_tradeID] -= trade.eth.amountOfETHToSell;\n\t\ttrade.status = TradeLib.TradeStatus.Withdrawn;\n\n\t\t// emit the TradeWithdrawn event\n\t\temit TradeWithdrawn(trade.tradeId, trade.seller, trade.buyer);\n\t}\n\n\t/***********\n\t * GETTERS *\n\t ***********/\n\n\tfunction getTrade(uint256 _tradeID) external view returns (TradeLib.Trade memory) {\n\t\treturn tradeIDToTrade[_tradeID];\n\t}\n\n\tfunction getTradesIDsByUser(address _user) external view returns (uint256[] memory) {\n\t\treturn userToTradesIDs[_user];\n\t}\n\n\tfunction getPendingTradesIDs() external view returns (uint256[] memory) {\n\t\treturn pendingTradesIDs;\n\t}\n\n\tfunction getTradeStatus(uint256 _tradeID) external view returns (TradeLib.TradeStatus) {\n\t\treturn tradeIDToTrade[_tradeID].status;\n\t}\n\n\tfunction getPendingTradeIndex(uint256 _tradeID) internal view returns (uint256) {\n\t\tfor (uint i = 0; i < pendingTradesIDs.length; i++) {\n\t\t\tif (pendingTradesIDs[i] == _tradeID) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn pendingTradesIDs.length;\n\t}\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}